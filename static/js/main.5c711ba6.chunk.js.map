{"version":3,"sources":["components/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["listItem","props","listItems","items","map","item","className","key","type","value","text","id","onChange","e","setUpdate","target","icon","onClick","deleteItem","editItem","duration","easing","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","newItems","filter","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TA0CeA,MApCf,SAAkBC,GACd,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BACIC,KAAK,OACLC,MAAOJ,EAAKK,KACZC,GAAIN,EAAKE,IACTK,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAON,MAAOJ,EAAKE,QAIjD,8BACI,kBAAC,IAAD,CACID,UAAU,UACVU,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,MACrCK,SAAU,kBAAMX,EAAMkB,SAASd,EAAKE,cAOxD,OACI,6BACI,kBAAC,IAAD,CAAUa,SAAU,IAAKC,OAAO,eAC1BnB,K,eC7BlBoB,IAAQC,IAAIC,K,IAsFGC,E,kDAnFb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAURyB,YAAc,SAACb,GACb,EAAKc,SAAS,CACZC,YAAY,CACVlB,KAAMG,EAAEE,OAAON,MACfF,IAAKsB,KAAKC,UAfG,EAoBnBC,QAAU,SAAClB,GACTA,EAAEmB,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAC3B,GAAoB,KAAjBK,EAAQvB,KAAa,CACtB,IAAMyB,EAAQ,sBAAO,EAAKD,MAAM/B,OAAlB,CAAyB8B,IACvC,EAAKN,SAAS,CACZxB,MAAQgC,EACRP,YAAc,CACZlB,KAAM,GACNH,IAAK,QA7BM,EAoCnBW,WAAa,SAACX,GAAS,IAEf4B,EADU,EAAKD,MAAf/B,MACiBiC,QAAO,SAAA/B,GAAI,OAAIA,EAAKE,MAAQA,KACnD,EAAKoB,SAAS,CACZxB,MAAOgC,KAxCQ,EA4CnBrB,UAAY,SAACJ,EAAMH,GAAS,IACnBJ,EAAS,EAAK+B,MAAd/B,MACPA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IACdF,EAAKK,KAAOA,MAGhB,EAAKiB,SAAS,CACZxB,MAAOA,KAlDT,EAAK+B,MAAM,CACT/B,MAAM,GACNyB,YAAY,CACVlB,KAAK,GACLH,IAAI,KANS,E,qDA0DjB,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAMK,GAAG,aAAa0B,SAAUC,KAAKP,SACnC,2BAAOvB,KAAK,OAAO+B,YAAY,aAC7B9B,MAAO6B,KAAKJ,MAAMN,YAAYlB,KAC9BE,SAAU0B,KAAKZ,cAEjB,4BAAQlB,KAAK,UAAb,QAEF,kBAAC,EAAD,CACEL,MAAOmC,KAAKJ,MAAM/B,MAClBe,WAAYoB,KAAKpB,WACjBJ,UAAWwB,KAAKxB,kB,GAxEV0B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAIFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c711ba6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './ListItems.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction listItem(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => {\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input \r\n                    type=\"text\" \r\n                    value={item.text}\r\n                    id={item.key}\r\n                    onChange={\r\n                        (e) => {\r\n                            props.setUpdate(e.target.value, item.key)\r\n                        }\r\n                    }\r\n                />\r\n                <span >\r\n                    <FontAwesomeIcon \r\n                        className=\"faicons\" \r\n                        icon='trash'\r\n                        onClick={() => props.deleteItem(item.key)}\r\n                        onChange={() => props.editItem(item.key)}\r\n                    />\r\n                </span>\r\n            </p>\r\n            \r\n        </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n                 {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default listItem;","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport ListItems from './components/ListItems';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faTrash);\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      items:[],\r\n      currentItem:{\r\n        text:'',\r\n        key:''\r\n      }\r\n    }\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    this.setState({\r\n      currentItem:{\r\n        text: e.target.value,\r\n        key: Date.now()\r\n      }\r\n    })\r\n  }\r\n\r\n  addItem = (e) => {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    if(newItem.text !== '') {\r\n      const newItems = [...this.state.items, newItem];\r\n      this.setState({\r\n        items : newItems,\r\n        currentItem : {\r\n          text: '',\r\n          key: ''\r\n        }\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  deleteItem = (key) => {\r\n    var { items } = this.state;\r\n    const newItems = items.filter(item => item.key !== key)\r\n    this.setState({\r\n      items: newItems\r\n    })\r\n  }\r\n\r\n  setUpdate = (text, key) => {\r\n    const {items} = this.state;\r\n    items.map(item => {\r\n      if(item.key === key){\r\n        item.text = text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n    \r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n            <input type=\"text\" placeholder=\"Enter text\"\r\n              value={this.state.currentItem.text}\r\n              onChange={this.handleInput}  \r\n            />\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n          <ListItems \r\n            items={this.state.items} \r\n            deleteItem={this.deleteItem}\r\n            setUpdate={this.setUpdate}\r\n          ></ListItems>\r\n\r\n        </header>\r\n      </div>\r\n    )\r\n\r\n  }\r\n\r\n  \r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}